local function parseString(str)
  if(str:lower() == "true") then return true end
  if(str:lower() == "false") then return false end
  local ok = tonumber(str) ~= nil
  if(ok) then return tonumber(str) end
  return str
end

local function parseArgs(args)
  local flags = {}
  local argu = {}
  local l = #args
  for k,v in pairs(args) do
      if(v:match("%-(.+)=(.+)")) then
        local name,val = v:match("%-(.+)=(.+)")
        flags[name] = parseString(val)
      elseif(v:match("%-(.+)")) then
        local name = v:match("%-(.+)")
        flags[name] = true
      else
        if(not v:match("%-(.+)=(.+)") and not v:match("%-(.+)")) then
          table.insert(argu, parseString(v))
        end
      end
  end
  return flags,argu
end

local function contains(t,o)
  for k,v in pairs(t) do if(v == o) then return true end end
  return false
end

@class Command {

  initialize(name) |
    self._name = name
    self._alias = {}
    self._executor = function() end
    self._subCommands = {}
    self._main = false
  |

  setExecutor(func) |
    self._executor = func
  |

  setMain(bool) |
    self._main = bool
  |

  addAlias(al) |
    table.insert(self._alias, al)
    return self
  |

  newSubCommand(name) |
    local sub = Command:new(name)
    self:addSubCommand(sub)
    return sub
  |

  addSubCommand(cmd) |
    table.insert(self._subCommands,cmd)
    return self
  |

  execute(args) |
    self._executor(unpack(args))
  |

  getSubCommands() |
    return self._subCommands
  |

  getName() |
    return self._name
  |

  getAlias() |
    return self._alias
  |

  execute(args) |
    local args = args or {}
    if(type(args) ~= "table") then args = {args} end
    if(#args == 0) then self._executor() return end
    local first = args[1]
    if(first:sub(1,1) ~= "-") then
      for _,cmd in pairs(self._subCommands) do
        if(cmd:getName() == first or contains(cmd:getAlias(), first)) then
          cmd:execute({select(2,unpack(args))})
          return
        end
      end
      local flags, arguments = parseArgs({select(1, unpack(args))})
      self._executor(flags,arguments)
    else
      local flags, arguments = parseArgs({select(1, unpack(args))})
      self._executor(flags,arguments)
    end
  |

}
